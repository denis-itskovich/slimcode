import org.gradle.internal.jvm.Jvm

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'idea'
apply plugin: 'com.jfrog.bintray'

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

task copyTestResources(type: Copy) {
    from "${projectDir}/src/test/resources"
    into "${buildDir}/classes/test"
}

task copyResources(type: Copy) {
    from "${projectDir}/src/main/resources"
    into "${buildDir}/classes/main"
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

processTestResources.dependsOn copyTestResources
processResources.dependsOn copyResources

publishing {
    repositories {
        mavenLocal()
    }
    publications {
        mavenJava(MavenPublication) {
            artifactId 'slimrepo-apt'
            from components.java
            artifact (sourceJar)
        }
    }
}

test {
    afterTest { descriptor, result ->
        println "TEST ${result.resultType} - ${descriptor.name}"
    }
}

if (hasProperty('bintrayUser') && hasProperty('bintrayKey')) {
    bintray {
        user = bintrayUser
        key = bintrayKey
        publications = ['mavenJava'] //When uploading Maven-based publication files
        dryRun = false //Whether to run this as dry-run, without deploying
        publish = true //If version should be auto published after an upload
        pkg {
            repo = bintrayRepo
            name = 'slimrepo-apt'
            userOrg = bintrayOrg //An optional organization name when the repo belongs to one of the user's orgs
            desc = 'Slim Repository Annotation Processor'
            websiteUrl = bintrayWebsiteUrl
            issueTrackerUrl = bintrayIssueTrackerUrl
            vcsUrl = bintrayVcsUrl
            licenses = ['Apache-2.0']
            labels = ['java','orm','sqlite','apt']
            publicDownloadNumbers = bintrayPublicDownloadNumbers
            version {
                name = project.version //Bintray logical version name
            }
        }
    }
}

dependencies {
    compile 'com.squareup:javapoet:1.0.0'
    compile 'com.google.guava:guava:18.0'
    compile project(':slimrepo.core')

    testCompile project(path: ':slimrepo.core', configuration: 'testOutput')
    testCompile 'junit:junit:4.12'
    testCompile 'com.google.testing.compile:compile-testing:0.6'
    testCompile 'com.google.truth:truth:0.25'
    testCompile 'org.mockito:mockito-core:2.0.5-beta'

    testCompile files(Jvm.current().getToolsJar())
}
